#!/bin/bash
set -ex

export ALL_TARGET_ARCH=(amd64 arm32v6 arm64v8)
export DEFAULT_ARCH=amd64

GetCerbotVersionFromTag() {
    TAG=$1
    echo "${TAG//v/}"
}

GetQemuArch() {
    ARCH=$1

    case "$ARCH" in
        "amd64")
            echo "x86_64"
            ;;
        "arm32v6")
            echo "arm"
            ;;
        "arm64v8")
            echo "aarch64"
            ;;
        "*")
            echo "Not supported build architecture '$1'." >&2
            exit -1
    esac
}

DownloadQemuStatic() {
    ARCH=$1

    QEMU_ARCH=$(GetQemuArch "$ARCH")
    if [ ! -f "qemu-${QEMU_ARCH}-static" ]; then
        QEMU_DOWNLOAD_URL="https://github.com/multiarch/qemu-user-static/releases/download"
        QEMU_LATEST_TAG=$(curl -s https://api.github.com/repos/multiarch/qemu-user-static/tags \
            | grep 'name.*v[0-9]' \
            | head -n 1 \
            | cut -d '"' -f 4)
        curl -SL "${QEMU_DOWNLOAD_URL}/${QEMU_LATEST_TAG}/x86_64_qemu-$QEMU_ARCH-static.tar.gz" \
            | tar xzv
    fi
}

RegisterQemuHandlers() {
    docker run --rm --privileged multiarch/qemu-user-static:register --reset
}

BuildDockerCoreImage() {
    ARCH=$1
    VERSION=$2

    QEMU=$(GetQemuArch "$ARCH")
    docker build \
        --build-arg CERTBOT_VERSION="${VERSION}" \
        --build-arg TARGET_ARCH="${ARCH}" \
        --build-arg QEMU_ARCH="${QEMU}" \
        -f "${DOCKERFILE_PATH}" \
        -t "${DOCKER_REPO}:${ARCH}-v${VERSION}" \
        .
}

BuildDockerPluginImage() {
    ARCH=$1
    VERSION=$2
    PLUGIN=$3

    QEMU=$(GetQemuArch "$ARCH")
    docker build \
        --build-arg CERTBOT_VERSION="${VERSION}" \
        --build-arg TARGET_ARCH="${ARCH}" \
        --build-arg QEMU_ARCH="${QEMU}" \
        --build-arg PLUGIN_NAME="${PLUGIN}" \
        -f "${DOCKERFILE_PATH}" \
        -t "${DOCKER_REPO}:${ARCH}-v${VERSION}" \
        .
}

PushDockerImage() {
    ARCH=$1
    VERSION=$2

    docker push "${DOCKER_REPO}:${ARCH}-v${VERSION}"
}

TagDockerImageAliases() {
    ARCH=$1
    VERSION=$2

    docker tag "${DOCKER_REPO}:${ARCH}-v${VERSION}" "${DOCKER_REPO}:${ARCH}-latest"
    docker push "${DOCKER_REPO}:${ARCH}-latest"
    if [ "${ARCH}" == "${DEFAULT_ARCH}" ]; then
        docker tag "${DOCKER_REPO}:${ARCH}-v${VERSION}" "${DOCKER_REPO}:v${VERSION}"
        docker tag "${DOCKER_REPO}:${ARCH}-v${VERSION}" "${DOCKER_REPO}:latest"
        docker push "${DOCKER_REPO}:v${VERSION}"
        docker push "${DOCKER_REPO}:latest"
    fi
}
